--- /dev/null
+++ b/drivers/leds/trigger/ledtrig-poll.c
@@ -0,0 +1,139 @@
+/*
+ * LED Kernel Timer Trigger
+ *
+ * Copyright 2005-2006 Openedhand Ltd.
+ *
+ * Author: Richard Purdie <rpurdie@openedhand.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/ctype.h>
+#include <linux/leds.h>
+#include <linux/list.h>
+#include <linux/rwsem.h>
+
+extern struct rw_semaphore leds_poll_lock;
+extern struct list_head leds_poll_list;
+extern struct leds_poll_data led_poll;
+
+void led_poll_set(unsigned long freq)
+{
+    struct led_classdev *led_cdev;
+
+    if(led_poll.leds_count == 0)
+        return;
+
+    /* never off - just set to brightness */
+    if(freq == 0)
+    {
+    	down_read(&leds_poll_lock);
+    	list_for_each_entry(led_cdev, &leds_poll_list, poll_node) {
+            led_set_brightness(led_cdev,LED_FULL);
+    	}
+    	up_read(&leds_poll_lock);
+        return;
+    }
+
+    led_poll.bright_bit = 0x01;
+
+    mod_timer(&led_poll.poll_timer, jiffies + 1);
+}
+
+static ssize_t led_frequency_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%lu\n", led_poll.poll_frequency);
+}
+
+static ssize_t led_frequency_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned long state;
+	ssize_t ret = -EINVAL;
+
+	ret = kstrtoul(buf, 10, &state);
+	if (ret)
+		return ret;
+
+	led_poll.poll_frequency = state;
+
+    del_timer_sync(&led_poll.poll_timer);
+    led_poll_set(led_poll.poll_frequency);
+
+	return size;
+}
+
+static DEVICE_ATTR(frequency, 0644, led_frequency_show, led_frequency_store);
+
+static void poll_trig_activate(struct led_classdev *led_cdev)
+{
+	int rc;
+
+	rc = device_create_file(led_cdev->dev, &dev_attr_frequency);
+	if (rc)
+		return;
+
+    del_timer_sync(&led_poll.poll_timer);
+
+	down_write(&leds_poll_lock);
+	list_add_tail(&led_cdev->poll_node, &leds_poll_list);
+	up_write(&leds_poll_lock);
+
+    led_poll.leds_count ++;
+
+	led_poll_set(led_poll.poll_frequency);
+    
+	return;
+}
+
+static void poll_trig_deactivate(struct led_classdev *led_cdev)
+{
+
+    del_timer_sync(&led_poll.poll_timer);
+
+	down_write(&leds_poll_lock);
+	list_del(&led_cdev->poll_node);
+	up_write(&leds_poll_lock);
+
+    led_poll.leds_count --;
+
+    device_remove_file(led_cdev->dev, &dev_attr_frequency);
+
+    /* Stop polling */
+    led_poll_set(led_poll.poll_frequency);
+
+	/* Stop blinking */
+	led_set_brightness(led_cdev, LED_OFF);
+}
+
+static struct led_trigger poll_led_trigger = {
+	.name     = "poll",
+	.activate = poll_trig_activate,
+	.deactivate = poll_trig_deactivate,
+};
+
+static int __init poll_trig_init(void)
+{
+	return led_trigger_register(&poll_led_trigger);
+}
+
+static void __exit poll_trig_exit(void)
+{
+	led_trigger_unregister(&poll_led_trigger);
+}
+
+module_init(poll_trig_init);
+module_exit(poll_trig_exit);
+
+MODULE_AUTHOR("Richard Purdie <rpurdie@openedhand.com>");
+MODULE_DESCRIPTION("Poll LED trigger");
+MODULE_LICENSE("GPL");
+
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -83,7 +83,20 @@ struct led_classdev {
 	/* true if activated - deactivate routine uses it to do cleanup */
 	bool			activated;
 #endif
+
+/*AUTELAN-Begin:Added by zhouke for led control.2015-01-09*/
+    struct list_head	 poll_node;
+/* AUTELAN-End: Added by zhouke for led control.2015-01-09*/
+};
+
+/*AUTELAN-Begin:Added by zhouke for led control.2015-01-09*/
+struct leds_poll_data {
+    int leds_count;
+    int bright_bit;
+    unsigned long poll_frequency;
+    struct timer_list	 poll_timer;
 };
+/* AUTELAN-End: Added by zhouke for led control.2015-01-09*/
 
 extern int led_classdev_register(struct device *parent,
 				 struct led_classdev *led_cdev);
--- a/drivers/leds/leds-gpio.c
+++ b/drivers/leds/leds-gpio.c
@@ -35,6 +35,52 @@ struct gpio_led_data {
 			unsigned long *delay_on, unsigned long *delay_off);
 };
 
+/*AUTELAN-Begin:Added by zhouke for led control.2015-01-09*/
+#include "leds.h"
+
+struct leds_poll_data led_poll;
+
+DECLARE_RWSEM(leds_poll_lock);
+LIST_HEAD(leds_poll_list);
+
+void led_poll_function(unsigned long data)
+{
+    struct led_classdev *led_cdev;
+    int i = 0;
+    unsigned long expr_bit, tmp_bit;
+    unsigned long delay = led_poll.poll_frequency;
+
+    expr_bit =  led_poll.bright_bit;
+
+    if(down_read_trylock(&leds_poll_lock))
+    {
+        list_for_each_entry(led_cdev, &leds_poll_list, poll_node) {
+            tmp_bit = 0x1 << i;
+            i++;
+            if(expr_bit & tmp_bit)
+                __led_set_brightness(led_cdev, LED_FULL);
+            else
+                __led_set_brightness(led_cdev, LED_OFF);
+        }
+        up_read(&leds_poll_lock);
+
+        expr_bit = expr_bit << 1;
+        if(expr_bit == (0x1 << i))
+            led_poll.bright_bit = 0x01;
+        else
+            led_poll.bright_bit = expr_bit;
+    }
+
+	mod_timer(&led_poll.poll_timer, jiffies + msecs_to_jiffies(delay));
+}
+
+void led_stop_poll()
+{
+    del_timer_sync(&led_poll.poll_timer);
+}
+
+/* AUTELAN-End: Added by zhouke for led control.2015-01-09*/
+
 static void gpio_led_work(struct work_struct *work)
 {
 	struct gpio_led_data	*led_dat =
@@ -269,6 +315,15 @@ static int gpio_led_probe(struct platfor
 			return PTR_ERR(priv);
 	}
 
+/*AUTELAN-Begin:Added by zhouke for led control.2015-01-09*/
+    init_timer(&led_poll.poll_timer);
+	led_poll.poll_timer.function = led_poll_function;
+	led_poll.poll_timer.data = 1;
+    led_poll.poll_frequency = 500;
+    led_poll.leds_count = 0;
+    led_poll.bright_bit = 0x01;
+/* AUTELAN-End: Added by zhouke for led control.2015-01-09*/
+
 	platform_set_drvdata(pdev, priv);
 
 	return 0;
@@ -279,6 +334,10 @@ static int gpio_led_remove(struct platfo
 	struct gpio_leds_priv *priv = platform_get_drvdata(pdev);
 	int i;
 
+/*AUTELAN-Begin:Added by zhouke for led control.2015-01-09*/
+    led_stop_poll();
+/* AUTELAN-End: Added by zhouke for led control.2015-01-09*/
+
 	for (i = 0; i < priv->num_leds; i++)
 		delete_gpio_led(&priv->leds[i]);
 
--- a/drivers/leds/trigger/Kconfig
+++ b/drivers/leds/trigger/Kconfig
@@ -18,6 +18,17 @@ config LEDS_TRIGGER_TIMER
 	  For more details read Documentation/leds/leds-class.txt.
 
 	  If unsure, say Y.
+	  
+config LEDS_TRIGGER_POLLING
+	tristate "LED Timer Polling"
+	depends on LEDS_TRIGGERS
+	help
+	  This allows LEDs to be controlled by a programmable polling
+	  via sysfs. Some LED hardware can be programmed to start
+	  blinking the LED without any further software interaction.
+	  For more details read Documentation/leds/leds-class.txt.
+
+	  If unsure, say Y.
 
 config LEDS_TRIGGER_ONESHOT
 	tristate "LED One-shot Trigger"
--- a/drivers/leds/trigger/Makefile
+++ b/drivers/leds/trigger/Makefile
@@ -1,4 +1,5 @@
 obj-$(CONFIG_LEDS_TRIGGER_TIMER)	+= ledtrig-timer.o
+obj-$(CONFIG_LEDS_TRIGGER_POLLING)	+= ledtrig-poll.o
 obj-$(CONFIG_LEDS_TRIGGER_ONESHOT)	+= ledtrig-oneshot.o
 obj-$(CONFIG_LEDS_TRIGGER_IDE_DISK)	+= ledtrig-ide-disk.o
 obj-$(CONFIG_LEDS_TRIGGER_HEARTBEAT)	+= ledtrig-heartbeat.o
