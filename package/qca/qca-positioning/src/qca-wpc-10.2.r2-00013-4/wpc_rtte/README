/*
 * Copyright (c) 2011 Qualcomm Atheros, Inc..
 * All Rights Reserved.
 * Qualcomm Atheros Confidential and Proprietary.
 */
WPC RTT Engine/ Measurement Engine 

API's 
1) wpc_rtte_init(). This is to initialize RTTE variables which need to be computed only once. 
2) wpc_rtte_me_update_ftoa(ppd, nRxChains). This will calculate the final rtt (frtt) from the given proprietary information coming from the driver. 

Limitation:
1) final rtt is currently the minimum rtt from all nRxChains. 
2) Outlier detection is not yet implemented.

Testing the functionality:
1) To test the CIR generated at the AP, wpcRtte_Test binary is provided with the release. This has the same code used by the AP to generate CIR and calculate rtt.

2) Input: ./wpcRtte_Test nRxchains >logFile. Reads single_cd.txt. The sample cd.txt is provided with the binary. This file is generated by copying the cd display from nbpserver and converted in one line. The format is bigendian and data is presented as u_int32_t data seperated by spaces. 
3) Output: cir.txt. this has the power profile for all the chains. 



WPC RT Engine/ Measurement Engine 
----------------------------------------
    This directory contains the Measurement Engine development work. This engine enables AP to do IFFT (inverse fast fourier transform) on the channel dumps. This enables to do the first time of arrival (ftoa) correction on AP. This functionality is invoked when the nbpserver request for the measurements with response type 0. Which tells the wpc to send the consolidated measurment response with the follwing informations:
    1) final RTT in nsec
    2) average RTT in nsec (same as final RTT in current implementation)
    3) Std. deviation in RTT for N measurements 
    4) Avg. RSSI
    5) Std. dev. in RSSI for N measurements
    6) Number of measurments used to calculate avg. values.


Functions and their functionality 

1)  wpc_rtte_calculate_ftoa(wpc_probe_data *ppd, u_int16_t nRxChains)
    This functions calls IFFT routine and time of arrival (toa) correction routine. And finally updates the rtt from all the receive chains. 

2)  wpc_init_rtte()
    This function intializes the run time varibles required by IFFT routine. 

3)  wpc_rtte_ifft(int16_t *chanData,  u_int32_t *fftPwr, int16_t *p_twiddle, u_int16_t *p_bitRev, u_int16_t w_Nu);
    This is IFFT routine, which takes the channel dump from the driver and generates the power profile from the channel dump. 

4)  wpc_rtte_populate_channel_dump(int16_t *hTemp, int16_t *chanData, u_int16_t nRxChains, u_int16_t curr_chain, u_int16_t w_Nu);
    This routine rearranges the channel dump into real and imaginary parts of the complex channel dump. The rearranged data is then feeded back to the IFFT routine to get the power profile. 



