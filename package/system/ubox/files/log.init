#!/bin/sh /etc/rc.common
# Copyright (C) 2013 OpenWrt.org

# start after and stop before networking
START=21
STOP=89
PIDCOUNT=0

USE_PROCD=1
PROG=/sbin/logread

validate_log_section()
{
	uci_validate_section system system "${1}" \
		'log_file:string' \
		'log_size:uinteger' \
		'log_ip:ipaddr' \
		'log_remote:bool:1' \
		'log_port:port:514' \
		'log_proto:or("tcp", "udp"):udp' \
		'log_prefix:string'	\
		'log_module:string'	\
		'log_priority:string:LOG_NOTICE'
}

validate_log_daemon()
{
	uci_validate_section system system "${1}" \
		'log_size:uinteger:0' \
		'log_buffer_size:uinteger:0'
}

start_service_daemon()
{
	local log_buffer_size log_size
	validate_log_daemon "${1}"
	[ $log_buffer_size -eq 0 -a $log_size -gt 0 ] && log_buffer_size=$log_size
	[ $log_buffer_size -eq 0 ] && log_buffer_size=16
	procd_open_instance
	procd_set_param command "/sbin/logd"
	procd_append_param command -S "${log_buffer_size}"
	procd_set_param respawn
	procd_close_instance
}

start_service_file()
{
	PIDCOUNT="$(( ${PIDCOUNT} + 1))"
	local pid_file="/var/run/logread.${PIDCOUNT}.pid"
	local log_file log_size log_module log_priority

	validate_log_section "${1}" || {
		echo "validation failed"
		return 1
	}
	[ -z "${log_file}" ] && return
	if [ "${log_file}" == "/proc/kes_syslog" ];then
		return
	fi
	
	procd_open_instance
	procd_set_param command "$PROG" -f -F "$log_file" -p "$pid_file"
	[ -n "${log_size}" ] && procd_append_param command -S "$log_size"
	[ -n "${log_module}" ] && procd_append_param command -m "$log_module"
	[ -n "${log_priority}" ] && procd_append_param command -o "$log_priority"
	procd_set_param respawn
	procd_close_instance
}

start_service_kes()
{
	PIDCOUNT="$(( ${PIDCOUNT} + 1))"
	local pid_file="/var/run/logread.${PIDCOUNT}.pid"
	local kes_file="/proc/kes_syslog"
	local log_size
	local kes_syslog_flag=`cat /proc/kes_syslog_flag`
	
	validate_log_section "${1}" || {
		echo "validation failed"
		return 1
	}

	[ ! -f "${kes_file}" ] && return
	[ ! -f "/tmp/kes_history_syslog.log" ] && [ "$kes_syslog_flag" = "enable0" ] && cat ${kes_file} > /tmp/kes_history_syslog.log
	echo " " > ${kes_file}

	procd_open_instance
	procd_set_param command "$PROG" -f -F "$kes_file" -p "$pid_file"
	[ -n "${log_size}" ] && procd_append_param command -S "$log_size"
	[ -n "${log_module}" ] && procd_append_param command -m "$log_module"
	[ -n "${log_priority}" ] && procd_append_param command -o "$log_priority"
	procd_close_instance
}

start_service_remote()
{
	PIDCOUNT="$(( ${PIDCOUNT} + 1))"
	local pid_file="/var/run/logread.${PIDCOUNT}.pid"
	local log_ip log_port log_proto log_prefix log_remote log_module log_priority

	validate_log_section "${1}" || {
		echo "validation failed"
		return 1
	}
	[ "${log_remote}" -ne 0 ] || return
	[ -z "${log_ip}" ] && return

	procd_open_instance
	procd_set_param command "$PROG" -f -r "$log_ip" "${log_port}" -p "$pid_file" -i br-wan
	[ "${log_proto}" != "udp" ] || procd_append_param command -u
	[ -z "${log_prefix}" ] || procd_append_param command -P "${log_prefix}"
	[ -n "${log_module}" ] && procd_append_param command -m "$log_module"
	[ -n "${log_priority}" ] && procd_append_param command -o "$log_priority"
	procd_set_param respawn
	procd_close_instance
}

service_triggers()
{
	procd_add_reload_trigger "system"
	procd_add_validation validate_log_section
}

start_service()
{
	config_load system
	config_foreach start_service_daemon system
	config_foreach start_service_file system
	config_foreach start_service_kes system
	config_foreach start_service_remote system
}
