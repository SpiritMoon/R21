--- a/proto-shell.c
+++ b/proto-shell.c
@@ -155,11 +155,24 @@ proto_shell_handler(struct interface_pro
 	handler = state->handler;
 	proc = &state->script_task;
 
-	if (cmd == PROTO_CMD_SETUP) {
-		action = "setup";
-		state->last_error = -1;
-		proto_shell_clear_host_dep(state);
-		state->sm = S_SETUP;
+    if (cmd == PROTO_CMD_SETUP) {
+        switch (state->sm) {
+            case S_IDLE:
+                action = "setup";
+                state->last_error = -1;
+                proto_shell_clear_host_dep(state);
+                state->sm = S_SETUP;
+                break;
+
+            case S_SETUP_ABORT:
+            case S_TEARDOWN:
+            case S_SETUP:
+                return 0;
+
+            default:
+                return -1;
+        }
+
 	} else if (cmd == PROTO_CMD_RENEW) {
 		if (!(handler->proto.flags & PROTO_FLAG_RENEW_AVAILABLE))
 			return 0;
@@ -172,28 +185,38 @@ proto_shell_handler(struct interface_pro
 		state->renew_pending = false;
 		action = "renew";
 	} else {
-		if (state->sm == S_TEARDOWN)
-			return 0;
+        switch (state->sm) {
+            case S_SETUP:
+                if (state->script_task.uloop.pending) {
 
-		state->renew_pending = false;
-		if (state->script_task.uloop.pending) {
-			if (state->sm != S_SETUP_ABORT) {
 				uloop_timeout_set(&state->teardown_timeout, 1000);
 				kill(state->script_task.uloop.pid, SIGTERM);
 				if (state->proto_task.uloop.pending)
 					kill(state->proto_task.uloop.pid, SIGTERM);
+                state->renew_pending = false;
 				state->sm = S_SETUP_ABORT;
-			}
-			return 0;
-		}
+                return 0;
+                }
+                /* fall through if no script task is running */
+            case S_IDLE:
+                action = "teardown";
+                state->renew_pending = false;
+                state->sm = S_TEARDOWN;
+                if (state->last_error >= 0) {
+                    snprintf(error_buf, sizeof(error_buf), "ERROR=%d", state->last_error);
+                    envp[j++] = error_buf;
+
+                }
+                uloop_timeout_set(&state->teardown_timeout, 5000);
+                break;
+
+            case S_TEARDOWN:
+
+                return 0;
+            default:
+                return -1;
 
-		action = "teardown";
-		state->sm = S_TEARDOWN;
-		if (state->last_error >= 0) {
-			snprintf(error_buf, sizeof(error_buf), "ERROR=%d", state->last_error);
-			envp[j++] = error_buf;
 		}
-		uloop_timeout_set(&state->teardown_timeout, 5000);
 	}
 
 	D(INTERFACE, "run %s for interface '%s'\n", action, proto->iface->name);
