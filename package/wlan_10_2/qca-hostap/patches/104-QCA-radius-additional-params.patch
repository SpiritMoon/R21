diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 2147922..9479bee 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -1888,11 +1888,23 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			bss->radius->acct_server->shared_secret =
 				(u8 *) os_strdup(pos);
 			bss->radius->acct_server->shared_secret_len = len;
-		} else if (os_strcmp(buf, "radius_retry_primary_interval") ==
-			   0) {
+		} else if (os_strcmp(buf, "radius_retry_primary_interval") == 0) {
 			bss->radius->retry_primary_interval = atoi(pos);
-		} else if (os_strcmp(buf, "radius_acct_interim_interval") == 0)
-		{
+		} else if (os_strcmp(buf, "radius_server_retries") == 0) {
+			bss->radius->radius_server_retries = atoi(pos);
+			if((bss->radius->radius_server_retries < 0 ) || (bss->radius->radius_server_retries > 10 )) {
+				wpa_printf(MSG_ERROR, "Line %d: radius->radius_server_retries '%d'",
+					line,bss->radius->radius_server_retries);
+				return 1;
+			}
+		} else if (os_strcmp(buf, "radius_max_retry_wait") == 0) {
+			bss->radius->radius_max_retry_wait = atoi(pos);
+			if((bss->radius->radius_max_retry_wait < 1 ) || (bss->radius->radius_max_retry_wait > 120 )){
+				wpa_printf(MSG_ERROR, "Line %d: radius->radius_max_retry_wait '%d'",
+					line,bss->radius->radius_max_retry_wait);
+				return 1;
+			}
+ 		} else if (os_strcmp(buf, "radius_acct_interim_interval") == 0) {
 			bss->acct_interim_interval = atoi(pos);
 		} else if (os_strcmp(buf, "radius_request_cui") == 0) {
 			bss->radius_request_cui = atoi(pos);
@@ -2059,6 +2071,13 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		} else if (os_strcmp(buf, "peerkey") == 0) {
 			bss->peerkey = atoi(pos);
 #endif /* CONFIG_PEERKEY */
+       } else if (os_strcmp(buf, "identity_request_retry_interval") == 0) {
+		bss->identity_request_retry_interval = atoi(pos);
+                if((bss->identity_request_retry_interval < 0 ) || (bss->identity_request_retry_interval > 200 )){
+			wpa_printf(MSG_ERROR, "Line %d: Invalid identity_request_retry_interval '%d'",
+				line,bss->identity_request_retry_interval);
+			return 1;
+		}
 #ifdef CONFIG_IEEE80211R
 		} else if (os_strcmp(buf, "mobility_domain") == 0) {
 			if (os_strlen(pos) != 2 * MOBILITY_DOMAIN_ID_LEN ||
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 4b09e77..01bc86d 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -19,6 +19,8 @@
 #include "sta_info.h"
 #include "ap_config.h"
 
+#define RADIUS_CLIENT_MAX_RETRIES 10
+#define RADIUS_CLIENT_MAX_WAIT 120
 
 static void hostapd_config_free_vlan(struct hostapd_bss_config *bss)
 {
@@ -83,12 +85,15 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 
 	/* Set to -1 as defaults depends on HT in setup */
 	bss->wmm_enabled = -1;
+	bss->identity_request_retry_interval = 0;
 
 #ifdef CONFIG_IEEE80211R
 	bss->ft_over_ds = 1;
 #endif /* CONFIG_IEEE80211R */
 
 	bss->radius_das_time_window = 300;
+	bss->radius->radius_server_retries = RADIUS_CLIENT_MAX_RETRIES;
+	bss->radius->radius_max_retry_wait = RADIUS_CLIENT_MAX_WAIT;
 }
 
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 0d2898b..54a1ee4 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -264,6 +264,7 @@ struct hostapd_bss_config {
 	int rsn_preauth;
 	char *rsn_preauth_interfaces;
 	int peerkey;
+	int identity_request_retry_interval;
 
 #ifdef CONFIG_IEEE80211R
 	/* IEEE 802.11r - Fast BSS Transition */
diff --git a/src/ap/ieee802_1x.c b/src/ap/ieee802_1x.c
index dd0df1d..9cca27c 100644
--- a/src/ap/ieee802_1x.c
+++ b/src/ap/ieee802_1x.c
@@ -1791,6 +1791,9 @@ int ieee802_1x_init(struct hostapd_data *hapd)
 	conf.fragment_size = hapd->conf->fragment_size;
 	conf.pwd_group = hapd->conf->pwd_group;
 	conf.pbc_in_m1 = hapd->conf->pbc_in_m1;
+	if ( hapd->conf->identity_request_retry_interval ) {
+		conf.identity_request_retry_interval= hapd->conf->identity_request_retry_interval;
+	}
 
 	os_memset(&cb, 0, sizeof(cb));
 	cb.eapol_send = ieee802_1x_eapol_send;
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index b60a51c..f97dc76 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -135,6 +135,7 @@ struct wpa_auth_config {
 	int rsn_preauth;
 	int eapol_version;
 	int peerkey;
+	int identity_request_retry_interval;
 	int wmm_enabled;
 	int wmm_uapsd;
 	int disable_pmksa_caching;
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index 6e67df3..19813f1 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -46,6 +46,7 @@ static void hostapd_wpa_auth_conf(struct hostapd_bss_config *conf,
 	wconf->wmm_uapsd = conf->wmm_uapsd;
 	wconf->disable_pmksa_caching = conf->disable_pmksa_caching;
 	wconf->okc = conf->okc;
+	wconf->identity_request_retry_interval= conf->identity_request_retry_interval;
 #ifdef CONFIG_IEEE80211W
 	wconf->ieee80211w = conf->ieee80211w;
 #endif /* CONFIG_IEEE80211W */
diff --git a/src/ap/wpa_auth_i.h b/src/ap/wpa_auth_i.h
index d5cf2c5..910157c 100644
--- a/src/ap/wpa_auth_i.h
+++ b/src/ap/wpa_auth_i.h
@@ -24,6 +24,7 @@ struct wpa_stsl_negotiation {
 struct wpa_state_machine {
 	struct wpa_authenticator *wpa_auth;
 	struct wpa_group *group;
+	int identity_request_retry_interval;
 
 	u8 addr[ETH_ALEN];
 
diff --git a/src/ap/wpa_auth_ie.c b/src/ap/wpa_auth_ie.c
index f687182..07ad52b 100644
--- a/src/ap/wpa_auth_ie.c
+++ b/src/ap/wpa_auth_ie.c
@@ -663,6 +663,9 @@ int wpa_validate_wpa_ie(struct wpa_authenticator *wpa_auth,
 	}
 	os_memcpy(sm->wpa_ie, wpa_ie, wpa_ie_len);
 	sm->wpa_ie_len = wpa_ie_len;
+	if(wpa_auth->conf.identity_request_retry_interval){
+		sm->identity_request_retry_interval = wpa_auth->conf.identity_request_retry_interval; 
+	}
 
 	return WPA_IE_OK;
 }
diff --git a/src/eap_peer/eap_i.h b/src/eap_peer/eap_i.h
index adf5592..da417bd 100644
--- a/src/eap_peer/eap_i.h
+++ b/src/eap_peer/eap_i.h
@@ -345,6 +345,7 @@ struct eap_sm {
 	struct wps_context *wps;
 
 	int prev_failure;
+	int identity_request_retry_interval;
 };
 
 const u8 * eap_get_config_identity(struct eap_sm *sm, size_t *len);
diff --git a/src/eap_server/eap.h b/src/eap_server/eap.h
index f2a7cd7..c688666 100644
--- a/src/eap_server/eap.h
+++ b/src/eap_server/eap.h
@@ -104,6 +104,7 @@ struct eap_config {
 	int fragment_size;
 
 	int pbc_in_m1;
+	int identity_request_retry_interval;
 };
 
 
diff --git a/src/eap_server/eap_i.h b/src/eap_server/eap_i.h
index dfb0ff5..2f88ee4 100644
--- a/src/eap_server/eap_i.h
+++ b/src/eap_server/eap_i.h
@@ -188,6 +188,7 @@ struct eap_sm {
 	int fragment_size;
 
 	int pbc_in_m1;
+	int identity_request_retry_interval;
 };
 
 int eap_user_get(struct eap_sm *sm, const u8 *identity, size_t identity_len,
diff --git a/src/eap_server/eap_server.c b/src/eap_server/eap_server.c
index 44c089f..f6d80de 100644
--- a/src/eap_server/eap_server.c
+++ b/src/eap_server/eap_server.c
@@ -212,9 +212,14 @@ SM_STATE(EAP, IDLE)
 {
 	SM_ENTRY(EAP, IDLE);
 
-	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
-		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
-		sm->methodTimeout);
+	if(sm->identity_request_retry_interval) {
+		sm->eap_if.retransWhile = sm->identity_request_retry_interval ;
+	} else { 
+		sm->eap_if.retransWhile = eap_sm_calculateTimeout(
+			sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
+			sm->methodTimeout);
+	}
+	wpa_printf(MSG_DEBUG, "identity_request_retry_interval (%d) ",sm->eap_if.retransWhile);
 }
 
 
@@ -458,9 +463,14 @@ SM_STATE(EAP, IDLE2)
 {
 	SM_ENTRY(EAP, IDLE2);
 
-	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
-		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
-		sm->methodTimeout);
+	if(sm->identity_request_retry_interval) {
+		sm->eap_if.retransWhile = sm->identity_request_retry_interval ;
+	} else { 
+		sm->eap_if.retransWhile = eap_sm_calculateTimeout(
+			sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
+			sm->methodTimeout);
+	}
+	wpa_printf(MSG_DEBUG, "identity_request_retry_interval (%d) ",sm->eap_if.retransWhile);
 }
 
 
@@ -1267,6 +1277,9 @@ struct eap_sm * eap_server_sm_init(void *eapol_ctx,
 	sm->fragment_size = conf->fragment_size;
 	sm->pwd_group = conf->pwd_group;
 	sm->pbc_in_m1 = conf->pbc_in_m1;
+	if ( conf->identity_request_retry_interval ) {
+		sm->identity_request_retry_interval = conf->identity_request_retry_interval ;
+	}
 
 	wpa_printf(MSG_DEBUG, "EAP: Server state machine created");
 
diff --git a/src/eapol_auth/eapol_auth_sm.c b/src/eapol_auth/eapol_auth_sm.c
index 8d6d18f..3dce3c4 100644
--- a/src/eapol_auth/eapol_auth_sm.c
+++ b/src/eapol_auth/eapol_auth_sm.c
@@ -829,6 +829,9 @@ eapol_auth_alloc(struct eapol_authenticator *eapol, const u8 *addr,
 	eap_conf.fragment_size = eapol->conf.fragment_size;
 	eap_conf.pwd_group = eapol->conf.pwd_group;
 	eap_conf.pbc_in_m1 = eapol->conf.pbc_in_m1;
+	if(eapol->conf.identity_request_retry_interval) {
+		eap_conf.identity_request_retry_interval = eapol->conf.identity_request_retry_interval;
+	}
 	sm->eap = eap_server_sm_init(sm, &eapol_cb, &eap_conf);
 	if (sm->eap == NULL) {
 		eapol_auth_free(sm);
@@ -1079,6 +1082,7 @@ static int eapol_auth_conf_clone(struct eapol_auth_config *dst,
 	dst->tnc = src->tnc;
 	dst->wps = src->wps;
 	dst->fragment_size = src->fragment_size;
+	dst->identity_request_retry_interval = src->identity_request_retry_interval;
 	return 0;
 }
 
diff --git a/src/eapol_auth/eapol_auth_sm.h b/src/eapol_auth/eapol_auth_sm.h
index 5e8ff43..1e416ad 100644
--- a/src/eapol_auth/eapol_auth_sm.h
+++ b/src/eapol_auth/eapol_auth_sm.h
@@ -37,6 +37,7 @@ struct eapol_auth_config {
 	int fragment_size;
 	u16 pwd_group;
 	int pbc_in_m1;
+	int identity_request_retry_interval;
 
 	/* Opaque context pointer to owner data for callback functions */
 	void *ctx;
diff --git a/src/radius/radius_client.c b/src/radius/radius_client.c
index 1ee7131..fdd8b48 100644
--- a/src/radius/radius_client.c
+++ b/src/radius/radius_client.c
@@ -358,9 +358,12 @@ static int radius_client_retransmit(struct radius_client_data *radius,
 
 	entry->next_try = now + entry->next_wait;
 	entry->next_wait *= 2;
-	if (entry->next_wait > RADIUS_CLIENT_MAX_WAIT)
-		entry->next_wait = RADIUS_CLIENT_MAX_WAIT;
-	if (entry->attempts >= RADIUS_CLIENT_MAX_RETRIES) {
+	if (entry->next_wait > conf->radius_max_retry_wait) {
+		entry->next_wait = conf->radius_max_retry_wait;
+		entry->next_try = now + entry->next_wait;
+	}
+	wpa_printf(MSG_INFO, "RADIUS: Retry attempts :%d Maximum retry attempts :%d ",entry->attempts,conf->radius_server_retries);
+	if (entry->attempts >= conf->radius_server_retries) {
 		printf("Removing un-ACKed RADIUS message due to too many "
 		       "failed retransmit attempts\n");
 		return 1;
diff --git a/src/radius/radius_client.h b/src/radius/radius_client.h
index 3db16aa..d0901d4 100644
--- a/src/radius/radius_client.h
+++ b/src/radius/radius_client.h
@@ -174,6 +174,9 @@ struct hostapd_radius_servers {
 	 * force_client_addr - Whether to force client (local) address
 	 */
 	int force_client_addr;
+
+        int radius_server_retries;
+	int radius_max_retry_wait;
 };
 
 
